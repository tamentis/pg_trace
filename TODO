pg_trace
========

trace
-----
 - capture hex only and decode everything where appropriate, remove all the
   escape-dance code.

postgres
--------
 - check for postgres version.
 - what happens if pg writes pg_filenode while we read it?
 - only refresh the rn_cache if we see a write on pg_class.

ui
--
 - progress mode (curses? show the currently opened tables and how much they
   are being used, how far we are in the lseek?)
 - if lsof is missing, just avoid pre-loading the pfd cache and start from
   scratch.
 - proper fail if the PID is not existing
 - proper fail if the PID disappears

code
----
 - check for more leaks (valgrind)
 - fix debugging (not clear what does what, what outputs what)
 - also put the relmap in rn_cache?

multi-platform
--------------
 - [openbsd] find a way to make it work with ktrace/kdump
 - [openbsd] make a port
 - [debian/ubuntu] make package
 - decide if we do the trace switches dynamically or in ./configure.


pg_scopy
========
That would be a top-like took, wrapping pg_trace and showing the top files by access and
where the cursor is (using lseek() data, the gigabyte file index and possibly
the inheritance within tables). It would look like that:

    relname          read        written        cursor
    ----------------------------------------------------------
    my_table_a       1.14 MiB    0.2 MiB        45%
    another_table    204.1 GiB   1.4 MiB        5%
    pg_indexes       250 KiB     0 B            14%

 - try to interpret the content of read-writes?
 - guess the position in a table based on chunks (.1, .2 etc.)
 - understand table inheritance? try to estimate how many tables were scanned
   as part of a parent-table scan
